// This file contains functions used in Custom nodes in Windowed raymarching materials and in Illumination Compute Shaders.
// Because editing in custom node is horrible, it's nicer to just include and use a single 
// function from this file.

// Beware, modifications to this file will not be detected by the material shaders and they will not
// be recompiled. Shaders using this file have to be recompiled manually! (unless I find a way
// to tell the shadercompiler to always recompile the raymarch shaders on startup)

#pragma once

float GetTransferFuncPosition(float Value, float WindowCenter, float WindowWidth)
{
    return (Value - WindowCenter + (WindowWidth / 2.0)) / WindowWidth;
}

// Samples a Data volume, transforms it to fit the Windowing parameters and then transforms it by the TF. Corrects the opacity to account for StepSize (in Unreal units).
float4 SampleWindowedVolumeStep(float3 CurPos, float StepSize, Texture3D Volume, SamplerState VolumeSampler, Texture2D TF, SamplerState TFSampler, float4 WindowingParams)
{
    float DataValue = Volume.SampleLevel(VolumeSampler, CurPos, 0).r;
  
    // WindowingParams.x == Center, WindowingParams.y = Width
    float TFPos = GetTransferFuncPosition(DataValue, WindowingParams.x, WindowingParams.y);

    // If TF position is above 1 and high cutoff is enabled or 
    // it's below 0 and low cutoff is enabled, return zero (value is not on the Transfer function range)
    if ((TFPos < 0.0 && WindowingParams.z > 0.0) || (TFPos > 1.0 && WindowingParams.w > 0.0))
    {
        return float4(0, 0, 0, 0);
    }

    float4 ColorSample = TF.SampleLevel(TFSampler, float2(TFPos, 0.5), 0);
    ColorSample.a = saturate(ColorSample.a);
    ColorSample.a = 1.0 - pow(1.0 - ColorSample.a, StepSize);
    return ColorSample;
}

// BELOW is old code when I thought integer textures were the way to go.
// Some of this is usable, if you want to use integer textures.
// ESPECIALLY the asint() and asuint() functions. They are the key to reading anything from int textures.

//// Returns the position (clamped to [0,1]) on the TransferFunction texture, depending on an input data float, byte size, signedness and window level and range 
//// Note that window level and range should be normalized to a float corresponding to the appropriate pixel format

//// Masks for extending I8 and I16 to I32
//#define INT8_EXTENDING_MASK (1U << 7)
//#define INT16_EXTENDING_MASK (1U << 15)


//// THE FOLLOWING IS NOT TRUE! asint() actually works with i16 and i8. Keeping this here for potential future use!
////
//// Untrue statement follows:
//// Because we load values from the texture with asint(), the sign bit needs to be extended for signed ints.
//// see https://graphics.stanford.edu/~seander/bithacks.html, section "Sign extending from a variable bit-width"
//// By XORing with the sign-bit and then subtracting it, we get the corresponding 2's complement in 32bits.
//int GetIntFromI8(int I8Value)
//{
//    return (I8Value ^ INT8_EXTENDING_MASK) - INT8_EXTENDING_MASK;
//}

//int GetIntFromI16(int I16Value)
//{
//    return (I16Value ^ INT16_EXTENDING_MASK) - INT16_EXTENDING_MASK;
//}

//int GetSignedValue(int BytesPerVoxel, Texture3D Volume, float3 CurPos)
//{
    
//    int x, y, z;
//    Volume.GetDimensions(x, y, z);
//    // Decrease dimensions by 1, because with any UVW coord being == 1, we would load one after the array length
//    // E.G - with X dimension == 2, U == 1, we want to sample x[1], not x[2] (as that doesn't exist)
//    int3 Dimensions = int3(x - 1, y - 1, z - 1);
//    // We don't want to interpolate here, use load instead of sample.
//    int LoadedInt = asint(Volume.Load(int4(round(Dimensions * saturate(CurPos)), 0)));

//    int ConvertedInt;
//    switch (BytesPerVoxel)
//    {
//        case 4:
//            return LoadedInt;
//        case 2: 
//            return GetIntFromI16(LoadedInt);
//        case 1: 
//            return GetIntFromI8(LoadedInt);
//        default:
//            // return 0 on wrong amount of bytes set
//            return 0;
//    }
//}

//uint GetUnsignedValue(Texture3D Volume, float3 CurPos)
//{
//    int x, y, z;
//    Volume.GetDimensions(x, y, z);
//    // Decrease dimensions by 1, because with any UVW coord being == 1, we would load one after the array length
//    // E.G - with X dimension == 2, U == 1, we want to sample x[1], not x[2] (as that doesn't exist)
//    int3 Dimensions = int3(x - 1, y - 1, z - 1);
//    // We don't want to interpolate here, use load instead of sample.
//    return asuint(Volume.Load(int4(round(Dimensions * saturate(CurPos)), 0)));
//}

//// Samples a Data volume, transforms it to fit the TF Intensity domain and then transforms it by the TF. Corrects the opacity to account for StepSize (in World units).
//float4 SampleWindowedVolumeOld(int3 CurPos, float StepSize, Texture3D Volume, Texture2D TF, SamplerState TFSampler, float4 WindowingParams, int IsSigned)
//{
//    float DataValue;
//    if (IsSigned)
//    {
//        int LabelValue = asint(Volume.Load(int4(CurPos, 0)));
//        // Put int into double as to not lose precision.
//        DataValue = LabelValue;
//    }
//    else
//    {
//        uint LabelValue = asuint(Volume.Load(int4(CurPos, 0)));
//        // Put int into double as to not lose precision.
//        DataValue = LabelValue;
//    }
    
//    // WindowingParams.x == Center, WindowingParams.y = Width
//    float TFPos = GetTransferFuncPosition(DataValue, WindowingParams.x, WindowingParams.y);

//    // If TF position is above 1 and high cutoff is enabled or 
//    // it's below 0 and low cutoff is enabled, return transparent
//    if ((TFPos < 0.0 && WindowingParams.z > 0) || (TFPos > 1.0 && WindowingParams.w > 0))
//    {
//        return float4(0, 0, 0, 0);
//    }

//    float4 ColorSample = TF.SampleLevel(TFSampler, float2(TFPos, 0.5), 0);
//    ColorSample.a = 1.0 - pow(1.0 - ColorSample.a, StepSize);
//    return ColorSample;
//}