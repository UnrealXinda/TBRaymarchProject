// This file contains functions that can be used for raymarching normalized volumes (0-1 values).
// These have no support for windowing and are not currently used in the main project.

// Beware, modifications to this file will not be detected by the material shaders and they will not
// be recompiled. Shaders using this file have to be recompiled manually! (unless I find a way
// to tell the shadercompiler to always recompile the raymarch shaders on startup)

#pragma once
#include "RaymarchMaterialCommon.usf"

// Performs lit raymarch for the current pixel. The lighting information is taken from a precomputed light volume.
// Will only work on normalized volumes (no windowing)
float4 PerformLitRaymarch(Texture3D DataVolume, // Data Volume 
                          Texture2D TF, float2 TFIntensityDomain, // Transfer func and intensity domain modifier
                          Texture3D LightVolume, // Light Volume  
                          float3 CurPos, float MaxSteps, float StepSize, float FinalStep, // Position of ray entry to cube, number of steps, size of a step and a 0-1 value of how big the final step is compared to regular steps 
                          float3 ClippingCenter, float3 ClippingDirection, // Clipping plane position and direction of clipped away region
                          FMaterialPixelParameters MaterialParameters)                      // Material Parameters
{
// Get camera vector in local space and multiply it by step size.
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal)) * StepSize;
    // Get step size in world units to be consistent with compute shaders' opacity calculations.
    float StepSizeWorld = length(mul(LocalCamVec, GetPrimitiveData(MaterialParameters.PrimitiveId).LocalToWorld));
    // Initialize accumulated light energy.
    float4 LightEnergy = 0;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(CurPos, LocalCamVec, MaterialParameters);

    int i = 0;
    for (i = 0; i < MaxSteps; i++)
    {
        CurPos += LocalCamVec; // Because we jitter only "against" the direction of LocalCamVec, start marching before first sample.
	    // Any position that is clipped by the clipping plane shall be ignored.
        if (!IsCurPosClipped(saturate(CurPos), ClippingCenter, ClippingDirection))
        {
            AccumulateOneRaymarchStep(LightEnergy, CurPos, DataVolume, TF, TFIntensityDomain, LightVolume, StepSizeWorld);
        }

        // Exit early if light energy (opacity) is already very high (so future steps would have almost no impact on color).
        if (LightEnergy.a > 0.95f)
        {
            LightEnergy.a = 1.0f;
            break;
        };
    }

    // Handle FinalStep (only if we went through all the previous steps and the final step size is above zero)
    if (i == MaxSteps && FinalStep > 0.0f)
    {
        CurPos += LocalCamVec * (FinalStep);
        // If the final step is clipped, don't do anything.
        if (!IsCurPosClipped(saturate(CurPos), ClippingCenter, ClippingDirection))
        {
            AccumulateOneRaymarchStep(LightEnergy, CurPos, DataVolume, TF, TFIntensityDomain, LightVolume, StepSizeWorld * FinalStep);
        }
    }

    return LightEnergy;
}


// Performs an intensity raymarch for the current pixel. This means as soon as the volume is hit, set full opacity and just return the grayscale as a color.
// TODO - this could be done much smarter, by taking the cutting plane into account already when generating the entry and exit points!
// or notTODO? - that can also be done for the regular raymarcher! But since labeling volumes ignore cutting plane, the labeled versions would still need to
// march the whole cube anyways.
float4 PerformIntensityRaymarch(Texture3D DataVolume, // Data Volume
                                  float3 CurPos, float MaxSteps, float StepSize, float FinalStep, // Position of ray entry to cube, number of steps, size of a step and a 0-1 value of how big the final step is compared to regular steps 
                                  float3 ClippingCenter, float3 ClippingDirection, // Clipping plane position and direction of clipped away region
                                  FMaterialPixelParameters MaterialParameters)                      // Material Parameters
{
    // Get camera vector in local space and multiply it by step size.
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal)) * StepSize;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(CurPos, LocalCamVec, MaterialParameters);

    int i = 0;
    for (i = 0; i < MaxSteps; i++)
    {
        CurPos += LocalCamVec;
	    // Any position that is clipped by the clipping plane shall be ignored, otherwise just return the hit color.
        if (!IsCurPosClipped(CurPos, ClippingCenter, ClippingDirection))
        {
            float GrayScale = DataVolume.SampleLevel(Material.Clamp_WorldGroupSettings, saturate(CurPos), 0).r;
            return float4(GrayScale, GrayScale, GrayScale, 1);
        }
    }

    // Handle FinalStep (only if we went through all the previous steps and the final step size is above zero)
    if (i == MaxSteps && FinalStep > 0.00f)
    {
        CurPos += LocalCamVec * (FinalStep);
        if (!IsCurPosClipped(CurPos, ClippingCenter, ClippingDirection))
        {
            float GrayScale = DataVolume.SampleLevel(Material.Clamp_WorldGroupSettings, saturate(CurPos), 0).r;
            return float4(GrayScale, GrayScale, GrayScale, 1);
        }
    }

    // Didn't hit anything
    return float4(0.0, 0.0, 0.0, 0.0);
}


// Performs lit raymarch for the current pixel. Also takes into account a provided labeling volume. 
// Labeling volume ignores the clipping plane, so labels are always visible.
// The lighting information is taken from a precomputed light volume.
float4 PerformLitRaymarchLabeled(Texture3D DataVolume, // Data Volume
                                 Texture2D TF, float2 TFIntensityDomain, // Transfer func and intensity domain modifier
                                 Texture3D LightVolume,  Texture3D LabelVolume, 
                                 float3 CurPos, float MaxSteps, float StepSize, float FinalStep, // Position of ray entry to cube, number of steps, size of a step and a 0-1 value of how big the final step is compared to regular steps 
                                 float3 ClippingCenter, float3 ClippingDirection, // Clipping plane position and direction of clipped away region
                                 FMaterialPixelParameters MaterialParameters)                    // Material Parameters
{
    // Get camera vector in local space and multiply it by step size.
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal)) * StepSize;
    // Get step size in world units to be consistent with compute shaders' opacity calculations.
    float StepSizeWorld = length(mul(LocalCamVec, GetPrimitiveData(MaterialParameters.PrimitiveId).LocalToWorld));
    // Initialize accumulated light energy.
    float4 LightEnergy = 0;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(CurPos, LocalCamVec, MaterialParameters);

    int i = 0;
    for (i = 0; i < MaxSteps; i++)
    {
        CurPos += LocalCamVec;
        // Label volume ignores clipping.
        AccumulateOneRaymarchLabelStep(LightEnergy, CurPos, LabelVolume, StepSizeWorld);
	    // Any position that is clipped by the clipping plane shall be ignored.
        if (!IsCurPosClipped(saturate(CurPos), ClippingCenter, ClippingDirection))
        {
            AccumulateOneRaymarchStep(LightEnergy, CurPos, DataVolume, TF, TFIntensityDomain, LightVolume, StepSizeWorld);
        }

        // Exit early if light energy (opacity) is already very high (so future steps would have almost no impact on color).
        if (LightEnergy.a > 0.95f)
        {
            LightEnergy.a = 1.0f;
            break;
        };
    }

    // Handle FinalStep (only if we went through all the previous steps and the final step size is above zero)
    if (i == MaxSteps && FinalStep > 0.0f)
    {
        CurPos += LocalCamVec * (FinalStep);
        // Accumulate label.
        AccumulateOneRaymarchLabelStep(LightEnergy, CurPos, LabelVolume, StepSizeWorld * FinalStep);
        // If the final step is clipped, don't do anything.
        if (!IsCurPosClipped(saturate(CurPos), ClippingCenter, ClippingDirection))
        {
            AccumulateOneRaymarchStep(LightEnergy, CurPos, DataVolume, TF, TFIntensityDomain, LightVolume, StepSizeWorld * FinalStep);
        }
    }

    return LightEnergy;
}


// Performs intensity raymarch for the current pixel. Also takes into account a provided labeling volume. 
// Labeling volume ignores the clipping plane, so labels are always visible. 
// Intensity raymarch means as soon as we hit the volume, we take that as a fully opaque sample, mix in the color gotten from sampling labels until that point and return.
float4 PerformIntensityRaymarchLabeled(Texture3D DataVolume, Texture3D LabelVolume, 
                                        float3 CurPos, float MaxSteps, float StepSize, float FinalStep, // Position of ray entry to cube, number of steps, size of a step and a 0-1 value of how big the final step is compared to regular steps 
                                        float3 ClippingCenter, float3 ClippingDirection, // Clipping plane position and direction of clipped away region
                                        FMaterialPixelParameters MaterialParameters)                    // Material Parameters
{
    // Get camera vector in local space and multiply it by step size.
    float3 LocalCamVec = -normalize(mul(MaterialParameters.CameraVector, GetPrimitiveData(MaterialParameters.PrimitiveId).WorldToLocal)) * StepSize;
    // Get step size in world units to be consistent with compute shaders' opacity calculations.
    float StepSizeWorld = length(mul(LocalCamVec, GetPrimitiveData(MaterialParameters.PrimitiveId).LocalToWorld));
    // Initialize accumulated light energy.
    float4 LightEnergy = 0;
    // Jitter Entry position to avoid artifacts.
    JitterEntryPos(CurPos, LocalCamVec, MaterialParameters);

    int i = 0;
    for (i = 0; i < MaxSteps; i++)
    {
        CurPos += LocalCamVec;
        // Label volume ignores clipping, so accumulate the color from that.
        AccumulateOneRaymarchLabelStep(LightEnergy, CurPos, LabelVolume, StepSizeWorld);
	    // Once we hit the volume, raymarching is over. Take the sample as a fully opaque one, mix in the current label color and return.
        if (!IsCurPosClipped(saturate(CurPos), ClippingCenter, ClippingDirection))
        {
            float GrayScale = DataVolume.SampleLevel(Material.Clamp_WorldGroupSettings, saturate(CurPos), 0).r;
            AccumulateLightEnergy(LightEnergy, float4(GrayScale, GrayScale, GrayScale, 1.0));
            return LightEnergy;
        }

        // Exit early if light energy (opacity) is already very high (so future steps would have almost no impact on color).
        // TODO - not sure how useful this is here, unless we have a lot of very opaque labels, this will almost never happen.
        if (LightEnergy.a > 0.95f)
        {
            LightEnergy.a = 1.0f;
            break;
        };
    }

    // Handle FinalStep (only if we went through all the previous steps and the final step size is above zero)
    if (i == MaxSteps && FinalStep > 0.0f)
    {
        CurPos += LocalCamVec * (FinalStep);
        // Accumulate label.
        AccumulateOneRaymarchLabelStep(LightEnergy, CurPos, LabelVolume, StepSizeWorld * FinalStep);
        // If the final step is clipped, don't do anything.
        if (!IsCurPosClipped(saturate(CurPos), ClippingCenter, ClippingDirection))
        {
            float GrayScale = DataVolume.SampleLevel(Material.Clamp_WorldGroupSettings, saturate(CurPos), 0).r;
            AccumulateLightEnergy(LightEnergy, float4(GrayScale, GrayScale, GrayScale, 1.0));
        }
    }

    return LightEnergy;
}
